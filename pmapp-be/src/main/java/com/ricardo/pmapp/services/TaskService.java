package com.ricardo.pmapp.services;

import com.ricardo.pmapp.exceptions.*;
import com.ricardo.pmapp.persistence.models.entities.Project;
import com.ricardo.pmapp.persistence.models.entities.Task;
import com.ricardo.pmapp.persistence.repositories.ProjectRepository;
import com.ricardo.pmapp.persistence.repositories.TaskRepository;
import com.ricardo.pmapp.persistence.repositories.UserRepository;
import com.ricardo.pmapp.security.models.UserPrincipal;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;

import static com.ricardo.pmapp.utils.PermissionUtils.canModifyProject;
import static com.ricardo.pmapp.utils.PermissionUtils.canModifyTask;

@Service
public class TaskService implements TaskServiceI {

    private final TaskRepository taskRepository;

    private final ProjectRepository projectRepository;

    private final UserRepository userRepository;

    public TaskService(TaskRepository taskRepository, ProjectRepository projectRepository,
                       UserRepository userRepository) {
        this.taskRepository = taskRepository;
        this.projectRepository = projectRepository;
        this.userRepository = userRepository;
    }

    @Override
    @Transactional
    public Task create(Task task, UserPrincipal requester) throws TaskCreationException {

        if (!canModifyTask(task, requester)) {
            // Check that user has rights to modify provided Task
            throw new TaskCreationException(String.format(ExceptionMessages.FORBIDDEN_PROJECT,
                    task.getProject().getName()));
        } else if (task.getCode() != null) {
            // No code should be provided on Task creation (autogenerated)
            throw new TaskCreationException(ExceptionMessages.TASK_CODE_IN_CREATION);
        } else if (task.getAssignee() != null && task.getAssignee().getUsername() != null &&
                !userRepository.findById(task.getAssignee().getUsername()).isPresent()) {
            // If an Assignee is passed to the Task, it should exist
            throw new TaskCreationException(String.format(ExceptionMessages.ASSIGNEE_NOT_EXISTING,
                    task.getAssignee().getUsername()));
        } else if (task.getProject() != null && task.getProject().getCode() != null &&
                !projectRepository.findById(task.getProject().getCode()).isPresent()) {
            // If a Project is passed to the Task, it should exist
            throw new TaskCreationException(String.format(ExceptionMessages.PROJECT_NOT_EXISTING,
                    task.getProject().getCode()));
        }

        return taskRepository.save(task);
    }

    @Override
    public Task getByCode(Long code) throws TaskNotFoundException {
        return taskRepository.findById(code)
                .orElseThrow(() -> new TaskNotFoundException(String.format(ExceptionMessages.TASK_NOT_EXISTING,
                        code)));
    }

    @Override
    public List<Task> findAll() {
        return taskRepository.findAll();
    }

    @Override
    public List<Task> findByAssignee(String username) {
        return taskRepository.findByAssignee_Username(username);
    }

    @Override
    public List<Task> findNotAssigned() {
        return findByAssignee(null);
    }

    @Override
    public List<Task> findByProject(Long code) {
        return taskRepository.findByProject_Code(code);
    }

    @Override
    @Transactional
    public Task update(Task task, UserPrincipal requester) throws TaskNotFoundException, TaskUpdateException {
        // Check that provided Task exists first
        getByCode(task.getCode());

        if (!canModifyTask(task, requester)) {
            // Check that user has rights to modify provided Task
            throw new TaskUpdateException(String.format(ExceptionMessages.FORBIDDEN_PROJECT,
                    task.getProject().getName()));
        } else if (task.getAssignee() != null && task.getAssignee().getUsername() != null &&
                !userRepository.findById(task.getAssignee().getUsername()).isPresent()) {
            // If an Assignee is passed to the Task, it should exist
            throw new TaskUpdateException(String.format(ExceptionMessages.ASSIGNEE_NOT_EXISTING,
                    task.getAssignee().getUsername()));
        } else if (task.getProject() != null && task.getProject().getCode() != null &&
                !projectRepository.findById(task.getProject().getCode()).isPresent()) {
            // If a Project is passed to the Task, it should exist
            throw new TaskUpdateException(String.format(ExceptionMessages.PROJECT_NOT_EXISTING,
                    task.getProject().getCode()));
        }

        return taskRepository.save(task);
    }

    @Override
    public void deleteByCode(Long code, UserPrincipal requester)
            throws TaskNotFoundException, TaskDeletionException {
        // Check that provided Task exists first
        Task existingTask = getByCode(code);

        // Check that user has rights to modify provided Task
        if (!canModifyTask(existingTask, requester)) {
            throw new TaskDeletionException(String.format(ExceptionMessages.FORBIDDEN_PROJECT,
                    existingTask.getProject().getName()));
        }

        try {
            taskRepository.deleteById(code);
        } catch (Exception ex) {
            throw new TaskDeletionException(ExceptionMessages.INTERNAL_SERVER_ERROR);
        }
    }

    @Transactional
    @Override
    public void deleteByAssignee(String username) throws TaskDeletionException {
        try {
            taskRepository.deleteByAssignee_Username(username);
        } catch (Exception ex) {
            throw new TaskDeletionException(ExceptionMessages.INTERNAL_SERVER_ERROR);
        }
    }

    @Transactional
    @Override
    public void deleteByProject(Long code, UserPrincipal requester)
            throws TaskDeletionException {
        Project project = projectRepository.findById(code)
                .orElseThrow(() -> new TaskDeletionException(
                        String.format(ExceptionMessages.PROJECT_NOT_EXISTING, code)));

        // Check that user has rights to modify Project (and thus Tasks)
        if (!canModifyProject(project, requester)) {
            throw new TaskDeletionException(String.format(ExceptionMessages.FORBIDDEN_PROJECT,
                    project.getName()));
        }

        try {
            taskRepository.deleteByProject_Code(code);
        } catch (Exception ex) {
            throw new TaskDeletionException(ExceptionMessages.INTERNAL_SERVER_ERROR);
        }
    }
}
