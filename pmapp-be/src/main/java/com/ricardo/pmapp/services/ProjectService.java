package com.ricardo.pmapp.services;

import com.ricardo.pmapp.exceptions.*;
import com.ricardo.pmapp.persistence.models.entities.Project;
import com.ricardo.pmapp.persistence.repositories.ProjectRepository;
import com.ricardo.pmapp.persistence.repositories.UserRepository;
import com.ricardo.pmapp.security.models.UserPrincipal;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;

import static com.ricardo.pmapp.utils.PermissionUtils.canModifyProject;

@Service
public class ProjectService implements ProjectServiceI {

    private final ProjectRepository projectRepository;

    private final UserRepository userRepository;

    public ProjectService(ProjectRepository projectRepository, UserRepository userRepository) {
        this.projectRepository = projectRepository;
        this.userRepository = userRepository;
    }

    @Override
    @Transactional
    public Project create(Project project) throws ProjectCreationException {
        if (project.getCode() != null) {
            // No code should be provided on Project creation (autogenerated)
            throw new ProjectCreationException(ExceptionMessages.PROJECT_CODE_IN_CREATION);
        } else if (project.getProjectManager() == null || project.getProjectManager().getUsername() == null) {
            // A Project Manager should be provided on Project creation
            throw new ProjectCreationException(ExceptionMessages.MISSING_PROJECT_MANAGER);
        } else if (!userRepository.findById(project.getProjectManager().getUsername()).isPresent()) {
            // The Project Manager should exist
            throw new ProjectCreationException(String.format(ExceptionMessages.PROJECT_MANAGER_NOT_EXISTING,
                    project.getProjectManager().getUsername()));
        }

        return projectRepository.save(project);
    }

    @Override
    public Project getByCode(Long code, UserPrincipal requester) throws ProjectNotFoundException, AccessDeniedException {
        Project project = projectRepository.findById(code)
                .orElseThrow(() -> new ProjectNotFoundException(String.format(ExceptionMessages.PROJECT_NOT_EXISTING,
                        code)));

        if (!canModifyProject(project, requester)) {
            // Check that user has rights to modify/access requested Project
            throw new AccessDeniedException(String.format(ExceptionMessages.FORBIDDEN_PROJECT,
                    project.getName()));
        }

        return project;
    }

    @Override
    public Project getByName(String name) throws ProjectNotFoundException {
        return projectRepository.getByName(name)
                .orElseThrow(() -> new ProjectNotFoundException(String.format(ExceptionMessages.PROJECT_NOT_EXISTING,
                        name)));
    }

    @Override
    public List<Project> findAll() {
        return projectRepository.findAll();
    }

    @Override
    public List<Project> findByProjectManager(String username) {
        return projectRepository.findByProjectManager_Username(username);
    }

    @Override
    public List<Project> findByName(String name) {
        return projectRepository.findByNameContainsIgnoreCase(name);
    }

    @Override
    @Transactional
    public Project update(Project project, UserPrincipal requester) throws ProjectNotFoundException, ProjectUpdateException, AccessDeniedException {
        // Check that provided Project exists first
        Project existingProject = getByCode(project.getCode(), requester);

        if (project.getProjectManager() == null || project.getProjectManager().getUsername() == null) {
            // A Project Manager should be provided on Project update
            throw new ProjectUpdateException(ExceptionMessages.MISSING_PROJECT_MANAGER);
        } else if (!userRepository.findById(project.getProjectManager().getUsername()).isPresent()) {
            // The Project Manager should exist
            throw new ProjectUpdateException(String.format(ExceptionMessages.PROJECT_MANAGER_NOT_EXISTING,
                    project.getProjectManager().getUsername()));
        } else if (!canModifyProject(existingProject, requester) ||
                !canModifyProject(project, requester)) {
            // Check that user has rights to modify provided Project
            throw new AccessDeniedException(String.format(ExceptionMessages.FORBIDDEN_PROJECT,
                    project.getName()));
        }

        // TODO Test if needed
        // Preserve existing Project Tasks
        project.setTasks(project.getTasks());

        return projectRepository.save(project);
    }

    @Transactional
    @Override
    public void deleteByCode(Long code, UserPrincipal requester)
            throws ProjectNotFoundException, ProjectDeletionException, AccessDeniedException {
        // Check that provided Project exists first
        Project existingProject = getByCode(code, requester);

        // Check that user has rights to modify provided Project
        if (!canModifyProject(existingProject, requester)) {
            throw new AccessDeniedException(String.format(ExceptionMessages.FORBIDDEN_PROJECT,
                    existingProject.getName()));
        }

        clearAndDeleteProject(existingProject);
    }

    @Transactional
    @Override
    public void deleteByProjectManager(String username) throws ProjectDeletionException {
        List<Project> projectsByProjectManager = findByProjectManager(username);

        for (Project project : projectsByProjectManager) {
            clearAndDeleteProject(project);
        }
    }

    private void clearAndDeleteProject(Project existingProject) throws ProjectDeletionException {
        // Clear relationships
        existingProject.getTasks().forEach(task -> task.setProject(null));

        // Delete Project
        try {
            projectRepository.deleteById(existingProject.getCode());
        } catch (Exception ex) {
            throw new ProjectDeletionException(ExceptionMessages.INTERNAL_SERVER_ERROR);
        }
    }
}
